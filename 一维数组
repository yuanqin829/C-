
//学指针

/* C类 ，方法：函数
* struct Node
* 变量 ：指针->函数的方法*/

/*数组：一维数组，
定义:
1据类型。数组名。【常量表达式】
2数据类型就是数组中所有元素都是这个类型。
3数组名命名规则和变量是一样。
4常量表达式数组中元素的个数。数组长度。

注意：数组是单一类型，连续存储
2初始化:和赋值int a = 5; 初始化！	a = 5;赋值
1在定义数组时直接对数组元素赋值int age[5] = { 18,12,11,34,32};
2在对所有数组元素初始化时候，可以省略常量表达式，
	int age[] = { 18,12,11,34,32,67,8798,};
3在只给部分元素初始化时，其余的元素默认为0，
	int age[5] = {18};
赋值：
{
	int age[5];  //age 5个元素
	//数组名+下标访问
	age[0]=18;
	age[1]=20;
	age[2]=16;
	age[3]=28;
	age[4]=27;
	printf("%d*%d\n", age[4],age[2]);

	getchar();
	return 0;
}

	int age[20];
	//有规律的
	//作为age的下标 遍历整个数组元素
	//赋值 随便 0-19
	for (int i = 0; i < 20; i++)
	{
		age[i] = i;
	}
  
  
  {
	int age[20];
	//有规律的
	//作为age的下标 遍历整个数组元素
	//赋值 随便 0-19
	for (int i = 0; i < 20; i++)
	{
		age[i] = i;
	}
	for (int i = 0; i < 20; i++)
	{
		printf("%d\n", age[i]);//打印0-19
	}


	getchar();
	return 0;
}

{
	//定义一个一维数组！
	//赋值：1 2 3 4 5 6 7 8 9 10
	int arry[10];

	for (int i = 0; i < 10; i++)
	{
		arry[i] = 2 * i + 1;
	}
	for (int i = 0; i < 10; i++)
	{
		//打印结果1  3  5  7  9  11 13  15 17  19
		printf("%d\t", arry[i]);
	}


	getchar();
	return 0;
  
  
  ////////////////////////////////////////////
  int main()
{
	//定义一个一维数组！
	//赋值：1 2 3 4 5 6 7 8 9 10
	int arry[10];

	for (int i = 0; i < 10; i++)
	{
		arry[i] = 2 * i + 1;
	}
	for (int i = 0; i < 10; i++)
	{
		//打印结果1  3  5  7  9  11 13  15 17  19
		printf("%d\t", arry[i]);
	}
	printf("%d\n");

	for (int i = 0; i < 10; i++)
	{
		arry[i] *= 2;
		printf("%d\t", arry[i]);
		//2  6  10 14  18 22 26  30  34  38
	}
	printf("\n");

	for (int i = 0; i < 10; i++)
	{
		if (arry[i] % 2 == 0 && arry[i] % 3 == 0)
		{
			printf("%d\t",arry[i]);
			//2 3的公倍数；
		}
	}


	getchar();
	return 0;
}
